#pragma once
#include <iostream>

namespace MY_ENUM {
	enum ERROR_ENUM {
		MY_EXCEPT_ALLOC_MEM_ERROR,
		MY_EXCEPT_OPEN_FILE_ERROR,
		MY_EXCEPT_WRITE_FILE_ERROR,
		MY_EXCEPT_READ_FILE_ERROR,
		MY_EXCEPT_ACCESS_FILE_ERROR,
		MY_EXCEPT_BAD_INPUT_TYPE_ERROR,
		MY_EXCEPT_NULL_POINTER_ERROR,
		MY_EXCEPT_MENU_STATEMENT,
		MY_EXCEPT_SAVE_TO_FILE_ST,
		MY_EXCEPT_READ_FROM_FILE_ST,
		MY_EXCEPT_THE_END,
		MY_EXCEPT_MOD_OBJ,
		MY_EXCEPT_DIDNT_FIND_OBJ,
		MY_EXCEPT_CLR_ALL,
		MY_EXCEPT_EMPTY_ARRAY,
		MY_EXCEPT_WRONG_CODE,
		MY_EXCEPT_BAD_INDEX,
	};
}

class Errors
{
private:
	MY_ENUM::ERROR_ENUM num;
	static const char* tab_err[];
public:
	Errors(enum MY_ENUM::ERROR_ENUM my_enum);
	~Errors();
	void except();

};